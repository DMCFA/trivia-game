{"version":3,"sources":["api/questions.js","features/game/score/scoreSlice.js","features/game/gameHelper/helperFunctions/gameFunctions.js","features/game/gameHelper/GameQuestions.js","img/loading.gif","features/game/gameHelper/LoadingScreen.js","features/game/score/Score.js","features/game/Game.js","features/Start.js","features/options/amount/amountSlice.js","features/options/amount/Amount.js","features/options/difficulty/difficultySlice.js","features/options/difficulty/Difficulty.js","features/options/theme/themeSlice.js","features/options/theme/Theme.js","img/dice.png","features/Begin.js","features/game/Final.js","App.js","store.js","index.js"],"names":["baseUrl","difficultyChosen","choice","amountChosen","themeChosen","hasRequestFailed","amount","theme","difficulty","a","axios","get","response","data","console","log","questionSlice","createSlice","name","initialState","value","reducers","increment","state","actions","parseText","text","DOMParser","parseFromString","body","textContent","shuffleAnswers","answersArray","i","t","answers","parsedAnswers","forEach","el","push","nextAnswer","arrLength","length","Math","floor","random","GameQuestion","questions","useState","answerOptions","setAnswerOptions","questionNum","setQuestionNum","initialValue","setValue","toggle","useCallback","v","useToggle","isBoolean","toggleIsOn","dispatch","useDispatch","history","useHistory","displayQuestion","allQuestions","question","toast","info","nextQuestion","useEffect","hasMultipleAnswers","type","allAnswers","incorrect_answers","slice","correct_answer","processAnswer","e","preventDefault","answer","updateScore","target","anyMoreQuestions","className","ButtonGroup","size","Button","variant","onClick","multipleAnswerButtons","LoadingScreen","src","loading","alt","Score","currentScore","score","Game","useSelector","setQuestions","isLoading","setIsLoading","getData","then","results","error","Start","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","amountSlice","action","payload","Amount","to","difficultySlice","Difficulty","id","themeSlice","Theme","Begin","dice","Final","App","exact","path","component","store","configureStore","reducer","themeReducer","difficultyReducer","amountReducer","questionReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7fa8b81b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = \"https://opentdb.com/api.php?\";\r\n\r\nconst difficultyChosen = (choice) => {\r\n  return `difficulty=${choice}`;\r\n};\r\n\r\nconst amountChosen = (choice) => {\r\n  return `amount=${choice}`;\r\n};\r\n\r\nconst themeChosen = (choice) => {\r\n  switch (choice) {\r\n    case \"books\":\r\n      return \"category=10\";\r\n    case \"movies\":\r\n      return \"category=11\";\r\n    case \"tv\":\r\n      return \"category=14\";\r\n    case \"games\":\r\n      return \"category=15\";\r\n    case \"sports\":\r\n      return \"category=21\";\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport let hasRequestFailed = false;\r\n\r\nexport async function getData(amount, theme, difficulty) {\r\n  difficulty = difficultyChosen(difficulty);\r\n  amount = amountChosen(amount);\r\n  theme = themeChosen(theme);\r\n  try {\r\n    const response = await axios.get(\r\n      `${baseUrl}${amount}&${theme}&${difficulty}&type=multiple`\r\n    );\r\n    const data = response.data;\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    hasRequestFailed = true;\r\n  }\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: 0,\r\n};\r\n\r\nexport const questionSlice = createSlice({\r\n  name: \"score\",\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => void (state.value += 1),\r\n  },\r\n});\r\n\r\nexport const { increment } = questionSlice.actions;\r\n\r\nexport default questionSlice.reducer;\r\n","////////////*GAME FUNCTIONS*/////////////////\r\n\r\n///*imports*///\r\nimport { toast } from \"react-toastify\";\r\n\r\n//*parse questions and answers*\\\\\r\nexport const parseText = (text) => {\r\n  const parser = new DOMParser();\r\n  return parser.parseFromString(text, \"text/html\").body.textContent;\r\n};\r\n\r\n///*call and parse next question to be displayed*///\r\nexport const nextQuestion = (allQuestions, questionNum) => {\r\n  if (allQuestions.length === 0) {\r\n    toast.info(\"Loading...\");\r\n  } else {\r\n    const question = allQuestions[questionNum].question;\r\n    return parseText(question);\r\n  }\r\n};\r\n\r\n///*parse answers*\\\\\\\r\nexport const nextAnswer = (answers) => {\r\n  const parsedAnswers = [];\r\n  answers.forEach((el) => parsedAnswers.push(parseText(el)));\r\n  return parsedAnswers;\r\n};\r\n\r\n///*takes an array with all the possible answers from the api and shuffles them around*///\r\nexport const shuffleAnswers = (answersArray) => {\r\n  const answers = nextAnswer(answersArray);\r\n  let arrLength = answers.length;\r\n  let i;\r\n  let t;\r\n  while (arrLength) {\r\n    i = Math.floor(Math.random() * arrLength--);\r\n    t = answers[arrLength];\r\n    answers[arrLength] = answers[i];\r\n    answers[i] = t;\r\n  }\r\n  return answers;\r\n};\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { ButtonGroup, Button } from \"react-bootstrap\";\r\nimport { increment } from \"./../score/scoreSlice\";\r\n\r\nimport { nextQuestion, shuffleAnswers } from \"./helperFunctions/gameFunctions\";\r\n\r\nfunction GameQuestion({ questions }) {\r\n  ///////////////////////////////////\r\n  //local states\r\n  //////////////////////////////////\r\n  const [answerOptions, setAnswerOptions] = useState([]);\r\n  const [questionNum, setQuestionNum] = useState(0);\r\n\r\n  ///////////////////////////////////\r\n  //set boolean value and state\r\n  //////////////////////////////////\r\n  const useToggle = (initialValue = false) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    const toggle = useCallback(() => {\r\n      setValue((v) => !v);\r\n    }, []);\r\n    return [value, toggle];\r\n  };\r\n\r\n  const [isBoolean, toggleIsOn] = useToggle();\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const displayQuestion = nextQuestion(questions, questionNum);\r\n\r\n  ///////////////////////////////////\r\n  //set answers\r\n  //////////////////////////////////\r\n  useEffect(() => {\r\n    (async () => {\r\n      const answers = await hasMultipleAnswers(questions);\r\n      if (!isBoolean) {\r\n        setAnswerOptions(answers);\r\n      }\r\n    })();\r\n  }, [questionNum]);\r\n\r\n  ///////////////////////////////////\r\n  //check if question type is multiple or boolean\r\n  //////////////////////////////////\r\n  const hasMultipleAnswers = (questions) => {\r\n    const question = questions[questionNum];\r\n    if (question.type === \"multiple\") {\r\n      const allAnswers = question.incorrect_answers.slice();\r\n      allAnswers.push(question.correct_answer);\r\n      shuffleAnswers(allAnswers);\r\n      return allAnswers;\r\n    }\r\n    toggleIsOn();\r\n  };\r\n\r\n  ///* create buttons for multiple answers* \\\\\\\r\n  const multipleAnswerButtons = (answerOptions) => {\r\n    return (\r\n      <ButtonGroup aria-label=\"group of buttons\" size=\"lg\">\r\n        <Button\r\n          className=\"answers-btn\"\r\n          variant=\"dark\"\r\n          value={answerOptions[0]}\r\n          onClick={(e) => processAnswer(e)}\r\n        >\r\n          {answerOptions[0]}\r\n        </Button>\r\n        <Button\r\n          className=\"answers-btn\"\r\n          variant=\"dark\"\r\n          value={answerOptions[1]}\r\n          onClick={(e) => processAnswer(e)}\r\n        >\r\n          {answerOptions[1]}\r\n        </Button>\r\n        <Button\r\n          className=\"answers-btn\"\r\n          variant=\"dark\"\r\n          value={answerOptions[2]}\r\n          onClick={(e) => processAnswer(e)}\r\n        >\r\n          {answerOptions[2]}\r\n        </Button>\r\n        <Button\r\n          className=\"answers-btn\"\r\n          variant=\"dark\"\r\n          value={answerOptions[3]}\r\n          onClick={(e) => processAnswer(e)}\r\n        >\r\n          {answerOptions[3]}\r\n        </Button>\r\n      </ButtonGroup>\r\n    );\r\n  };\r\n\r\n  ///* create buttons for true or false answers* \\\\\\\r\n  const trueOrFalseButtons = () => {\r\n    return (\r\n      <ButtonGroup aria-label=\"group of buttons\" size=\"lg\">\r\n        <Button\r\n          className=\"answers-btn-boolean\"\r\n          variant=\"success\"\r\n          value=\"True\"\r\n          onClick={(e) => {\r\n            processAnswer(e);\r\n          }}\r\n        >\r\n          True\r\n        </Button>\r\n        <Button\r\n          className=\"answers-btn-boolean\"\r\n          variant=\"danger\"\r\n          value=\"False\"\r\n          onClick={(e) => processAnswer(e)}\r\n        >\r\n          False\r\n        </Button>\r\n      </ButtonGroup>\r\n    );\r\n  };\r\n\r\n  ///////////////////////////////////\r\n  //update score\r\n  //////////////////////////////////\r\n  const updateScore = (answer) => {\r\n    const currentAnswer = answer;\r\n    const question = questions[questionNum];\r\n    if (currentAnswer === question.correct_answer) {\r\n      dispatch(increment());\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////\r\n  //answer button clicked and next question\r\n  //////////////////////////////////\r\n  const processAnswer = (e) => {\r\n    e.preventDefault();\r\n    const answer = e.target.value;\r\n    updateScore(answer);\r\n    setQuestionNum(questionNum + 1);\r\n    if (!anyMoreQuestions()) {\r\n      history.push(\"/final\");\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////\r\n  //check if there are any more questions\r\n  //////////////////////////////////\r\n  const anyMoreQuestions = () => {\r\n    return questionNum < questions.length - 1;\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"questions-container\">\r\n        <div className=\"question\">\r\n          <p>{displayQuestion}</p>\r\n          <div>\r\n            {isBoolean\r\n              ? trueOrFalseButtons()\r\n              : multipleAnswerButtons(answerOptions)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameQuestion;\r\n","export default __webpack_public_path__ + \"static/media/loading.757857ce.gif\";","import React from \"react\";\r\nimport loading from \"../../../img/loading.gif\";\r\n\r\nconst LoadingScreen = () => {\r\n  return (\r\n    <div className=\"loading-screen\">\r\n      <img className=\"loading-icon\" src={loading} alt=\"loading circles\"></img>;\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingScreen;\r\n","import React from \"react\";\r\n\r\nconst Score = ({ score }) => {\r\n  const currentScore = score;\r\n\r\n  return (\r\n    <div className=\"score-container\">\r\n      <h2 className=\"score\">Your Score ➡️ {currentScore}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { getData, hasRequestFailed } from \"../../api/questions\";\r\nimport GameQuestion from \"./gameHelper/GameQuestions\";\r\nimport LoadingScreen from \"./gameHelper/LoadingScreen\";\r\nimport Score from \"./score/Score\";\r\n\r\nconst Game = () => {\r\n  const theme = useSelector((state) => state.theme.value);\r\n  const difficulty = useSelector((state) => state.difficulty.value);\r\n  const amount = useSelector((state) => state.amount.value);\r\n  const score = useSelector((state) => state.question.value);\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  ///*display questions*\\\\\\\r\n  useEffect(() => {\r\n    getData(amount, theme, difficulty).then((results) => {\r\n      setQuestions(results.results);\r\n      setIsLoading(false);\r\n    });\r\n    if (hasRequestFailed) {\r\n      toast.error(\"❌ Something went wrong! ❌\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {isLoading ? <></> : <Score score={score} />}\r\n      {isLoading ? <LoadingScreen /> : <GameQuestion questions={questions} />}\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\n\r\nconst Start = () => {\r\n  const history = useHistory();\r\n  const difficulty = useSelector((state) => state.difficulty.value);\r\n  const theme = useSelector((state) => state.theme.value);\r\n  const amount = useSelector((state) => state.amount.value);\r\n\r\n  //check if all fields have been selected\r\n  const allFieldsChecked = () => {\r\n    if (difficulty || theme || amount === \"\") {\r\n      toast.error(\"⚠️ Go back and select all fields!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  //go to game page\r\n  const handleStart = () => {\r\n    if (allFieldsChecked()) {\r\n    } else {\r\n      history.push(\"/game\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"start\">\r\n      <h2 className=\"start-title\">Ready to Go?</h2>\r\n      <div className=\"start-btn-group\">\r\n        <Button\r\n          className=\"start-btn\"\r\n          size=\"lg\"\r\n          variant=\"success\"\r\n          onClick={handleStart}\r\n        >\r\n          Start\r\n        </Button>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Start;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: {},\r\n};\r\n\r\nexport const amountSlice = createSlice({\r\n  name: \"amount\",\r\n  initialState,\r\n  reducers: {\r\n    amount: (state, action) => void (state.value = action.payload),\r\n  },\r\n});\r\n\r\nexport const { amount } = amountSlice.actions;\r\n\r\nexport default amountSlice.reducer;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button, ButtonGroup } from \"react-bootstrap\";\r\nimport { Link } from \"react-scroll\";\r\nimport Start from \"../../Start\";\r\nimport { amount } from \"./amountSlice\";\r\n\r\nconst Amount = () => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div>\r\n      <div className=\"amount\">\r\n        <h2 className=\"amount-name\">How many questions should we give you?</h2>\r\n        <div className=\"amount-btn-group\">\r\n          <ButtonGroup aria-label=\"group of buttons\" size=\"lg\">\r\n            <Link to=\"start\">\r\n              <Button\r\n                className=\"amount-btn\"\r\n                value=\"10\"\r\n                onClick={(e) => dispatch(amount(e.target.value))}\r\n              >\r\n                10\r\n              </Button>\r\n              <Button\r\n                className=\"amount-btn\"\r\n                variant=\"success\"\r\n                value=\"20\"\r\n                onClick={(e) => dispatch(amount(e.target.value))}\r\n              >\r\n                20\r\n              </Button>\r\n              <Button\r\n                className=\"amount-btn\"\r\n                variant=\"warning\"\r\n                value=\"30\"\r\n                onClick={(e) => dispatch(amount(e.target.value))}\r\n              >\r\n                30\r\n              </Button>\r\n              <Button\r\n                className=\"amount-btn\"\r\n                variant=\"danger\"\r\n                value=\"40\"\r\n                onClick={(e) => dispatch(amount(e.target.value))}\r\n              >\r\n                40\r\n              </Button>\r\n              <Button\r\n                className=\"amount-btn\"\r\n                variant=\"info\"\r\n                value=\"50\"\r\n                onClick={(e) => dispatch(amount(e.target.value))}\r\n              >\r\n                50\r\n              </Button>\r\n            </Link>\r\n          </ButtonGroup>\r\n        </div>\r\n      </div>\r\n      <Start />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Amount;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: {},\r\n};\r\n\r\nexport const difficultySlice = createSlice({\r\n  name: \"difficulty\",\r\n  initialState,\r\n  reducers: {\r\n    difficulty: (state, action) => void (state.value = action.payload),\r\n  },\r\n});\r\n\r\nexport const { difficulty } = difficultySlice.actions;\r\n\r\nexport default difficultySlice.reducer;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button, ButtonGroup } from \"react-bootstrap\";\r\nimport { Link } from \"react-scroll\";\r\nimport Amount from \"../amount/Amount\";\r\nimport { difficulty } from \"./difficultySlice\";\r\n\r\nconst Difficulty = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"difficulty\">\r\n        <h2 className=\"difficulty-name\">How hard do you want it to be?</h2>\r\n        <div className=\"difficulty-btn-group\">\r\n          <ButtonGroup aria-label=\"group of buttons\" size=\"lg\">\r\n            <Link to=\"amount\">\r\n              <Button\r\n                className=\"difficulty-btn\"\r\n                value=\"easy\"\r\n                onClick={(e) => dispatch(difficulty(e.target.value))}\r\n              >\r\n                Easy\r\n              </Button>\r\n              <Button\r\n                className=\"difficulty-btn\"\r\n                variant=\"success\"\r\n                value=\"medium\"\r\n                onClick={(e) => dispatch(difficulty(e.target.value))}\r\n              >\r\n                Medium\r\n              </Button>\r\n              <Button\r\n                className=\"difficulty-btn\"\r\n                variant=\"warning\"\r\n                value=\"hard\"\r\n                onClick={(e) => dispatch(difficulty(e.target.value))}\r\n              >\r\n                Hard\r\n              </Button>\r\n            </Link>\r\n          </ButtonGroup>\r\n        </div>\r\n      </div>\r\n      <Amount id=\"amount\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Difficulty;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: {},\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n  name: \"theme\",\r\n  initialState,\r\n  reducers: {\r\n    theme: (state, action) => void (state.value = action.payload),\r\n  },\r\n});\r\n\r\nexport const { theme } = themeSlice.actions;\r\n\r\nexport default themeSlice.reducer;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button, ButtonGroup } from \"react-bootstrap\";\r\nimport { Link } from \"react-scroll\";\r\nimport Difficulty from \"../difficulty/Difficulty\";\r\nimport { theme } from \"./themeSlice\";\r\n\r\nconst Theme = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"theme\">\r\n        <h2 className=\"theme-name\">Choose your theme</h2>\r\n        <div className=\"theme-btn-group\">\r\n          <ButtonGroup aria-label=\"group of buttons\" size=\"lg\">\r\n            <Link to=\"difficulty\">\r\n              <Button\r\n                className=\"theme-btn\"\r\n                value=\"books\"\r\n                onClick={(e) => dispatch(theme(e.target.value))}\r\n              >\r\n                Books\r\n              </Button>\r\n              <Button\r\n                className=\"theme-btn\"\r\n                variant=\"success\"\r\n                value=\"movies\"\r\n                onClick={(e) => dispatch(theme(e.target.value))}\r\n              >\r\n                Movies\r\n              </Button>\r\n              <Button\r\n                className=\"theme-btn\"\r\n                variant=\"warning\"\r\n                value=\"tv\"\r\n                onClick={(e) => dispatch(theme(e.target.value))}\r\n              >\r\n                TV Shows\r\n              </Button>\r\n              <Button\r\n                className=\"theme-btn\"\r\n                variant=\"danger\"\r\n                value=\"games\"\r\n                onClick={(e) => dispatch(theme(e.target.value))}\r\n              >\r\n                Games\r\n              </Button>\r\n              <Button\r\n                className=\"theme-btn\"\r\n                variant=\"info\"\r\n                value=\"sports\"\r\n                onClick={(e) => dispatch(theme(e.target.value))}\r\n              >\r\n                Sports\r\n              </Button>\r\n            </Link>\r\n          </ButtonGroup>\r\n        </div>\r\n      </div>\r\n      <Difficulty id=\"difficulty\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Theme;\r\n","export default __webpack_public_path__ + \"static/media/dice.cf1e8dcb.png\";","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-scroll\";\r\nimport Theme from \"./options/theme/Theme\";\r\nimport dice from \"./../img/dice.png\";\r\n\r\nconst Begin = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"begin\">\r\n        <h1 className=\"begin-title\">\r\n          <img className=\"dice-img\" src={dice} alt=\"dice\" />\r\n          Trivia Game\r\n          <img className=\"dice-img\" src={dice} alt=\"dice\" />\r\n        </h1>\r\n        <div className=\"begin-btn-group\">\r\n          <Link to=\"theme\">\r\n            <Button\r\n              className=\"begin-btn begin-btn-pulsate\"\r\n              size=\"lg\"\r\n              variant=\"danger\"\r\n            >\r\n              Choose my options\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <Theme id=\"theme\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Begin;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst Final = () => {\r\n  const score = useSelector((state) => state.question.value);\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => history.push(\"/\");\r\n  return (\r\n    <div className=\"final-container\">\r\n      <h1 className=\"final-screen\">You got {score} answers right!</h1>\r\n      <Button\r\n        type=\"button\"\r\n        className=\"start-over btn btn-light\"\r\n        onClick={handleClick}\r\n      >\r\n        Start Over?\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Final;\r\n","import \"./App.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Game from \"./features/game/Game\";\nimport Begin from \"./features/Begin\";\nimport Final from \"./features/game/Final\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Begin}></Route>\n      </Switch>\n      <Switch>\n        <Route path=\"/game\" component={Game}></Route>\n      </Switch>\n      <Switch>\n        <Route path=\"/final\" component={Final}></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport themeReducer from \"./features/options/theme/themeSlice\";\r\nimport difficultyReducer from \"./features/options/difficulty/difficultySlice\";\r\nimport amountReducer from \"./features/options/amount/amountSlice\";\r\nimport questionReducer from \"./features/game/score/scoreSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    theme: themeReducer,\r\n    difficulty: difficultyReducer,\r\n    amount: amountReducer,\r\n    question: questionReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}